name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - dev

env:
  ECS_SERVICE: springboot-service               # set this to your Amazon ECS service name
  ECS_CLUSTER: springboot-app                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: sprintboot # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: springboot-app          # set this to the name of the container in the

jobs:
  # Build and test app
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Set up JDK 17 for building the Spring Boot app
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Build the Maven project (backend and frontend)
    - name: Build Backend and Frontend
      working-directory: ./app
      run: mvn clean install

    # Run backend tests
    - name: Run Backend Tests
      working-directory: ./app
      run: mvn test

    # Install Node.js for frontend tests
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # Install frontend dependencies
    - name: Install Frontend Dependencies
      working-directory: ./app
      run: npm install


    # Package the Spring Boot app
    - name: Package Application
      working-directory: ./app
      run: mvn package

    # Run the Spring Boot app
    - name: Run Spring Boot App
      run: |
        nohup java -jar target/*.jar &
        sleep 20 # Wait for the app to start
        #curl -v -u greg:turnquist http://localhost:8080/api/employees/3
      
    # Test API endpoint using curl (simple integration test)
    # - name: Test API Endpoint
    #   run: |
        # sleep 20 # Wait for the app to start
        # curl -v -u greg:turnquist http://localhost:8080/api/employees/3

  # Docker build and push job
  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build and push the Docker image
      - name: Build and push Docker image
        working-directory: ./app
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

  # Deployment job to AWS ECS
  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS CLI with Access Key and Secret Key
      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1  # Set your region

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true